@page "/organizers/{id:guid}/create-tournament"
@using System.ComponentModel.DataAnnotations;

@inject OrganizerState organizerState
@inject NavigationManager navigationManager
@inject IOrganizerClient organizerClient

<MudText Typo="Typo.h3">Create tournament</MudText>
<EditForm Model="@FormModel" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <MudTextField Label="Organizer name" Disabled For="@(() => organizerName)" @bind-Value="organizerName" />
                <MudTextField Label="Tournament name" For="@(() => FormModel.TournamentName)" @bind-Value="FormModel.TournamentName" />
                
            </MudPaper>
            <MudPaper Class="pa-4 mt-4">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled">Create</MudButton>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Validation summary</MudText>
                <MudText Color="@Color.Error">
                    <ValidationSummary />
                </MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Parameter]public Guid id { get; set; }
    CreateTournamentFormModel FormModel { get; set; } = new();
    string organizerName = string.Empty;

    protected override void OnInitialized()
    {
        organizerState.SetCurrent(id);
        var crtOrganizer = organizerState.Current;
        if (crtOrganizer.Tournament is not null || crtOrganizer.TournamentId != Guid.Empty)
        {
            navigationManager.NavigateTo("organizers");
        }
        organizerName = crtOrganizer.PersonalInfo.FirstName + " " + crtOrganizer.PersonalInfo.LastName;
    }

    async Task HandleSubmit(EditContext editContext)
    {
        if (editContext.Validate())
        {
            var tournamentId = await organizerClient.CreateTournamentAsync(id, FormModel.TournamentName);
            navigationManager.NavigateTo("organizers");
        }
    }

    public class CreateTournamentFormModel
    {
        [Required][StringLength(maximumLength:50, MinimumLength = 5)] public string TournamentName { get; set; } = string.Empty;
    }
}
